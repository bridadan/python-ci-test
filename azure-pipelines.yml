# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master
jobs:
- job: "Test"
  strategy:
    matrix:
      LinuxPython27:
        python.version: "2.7"
        imageName: "ubuntu-16.04"
        publishCoverage: "false"
      LinuxPython35:
        python.version: "3.5"
        imageName: "ubuntu-16.04"
        publishCoverage: "false"
      LinuxPython36:
        python.version: "3.6"
        imageName: "ubuntu-16.04"
        publishCoverage: "false"
      LinuxPython37:
        python.version: "3.7"
        imageName: "ubuntu-16.04"
        publishCoverage: "true"
      MacPython27:
        python.version: "2.7"
        imageName: "macos-10.13"
        publishCoverage: "false"
      MacPython35:
        python.version: "3.5"
        imageName: "macos-10.13"
        publishCoverage: "false"
      MacPython36:
        python.version: "3.6"
        imageName: "macos-10.13"
        publishCoverage: "false"
      MacPython37:
        python.version: "3.7"
        imageName: "macos-10.13"
        publishCoverage: "false"
      WindowsPython27:
        python.version: "2.7"
        imageName: "vs2017-win2016"
        publishCoverage: "false"
      WindowsPython35:
        python.version: "3.5"
        imageName: "vs2017-win2016"
        publishCoverage: "false"
      WindowsPython36:
        python.version: "3.6"
        imageName: "vs2017-win2016"
        publishCoverage: "false"
      WindowsPython37:
        python.version: "3.7"
        imageName: "vs2017-win2016"
        publishCoverage: "false"
    maxParallel: 10
  pool:
    vmImage: $(imageName)
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "$(python.version)"
      architecture: "x64"

  - script: python -m pip install --upgrade pip && pip install -r test_requirements.txt
    displayName: "Install dependencies"

  - script: |
      pytest tests --doctest-modules --junitxml=test-results.xml --cov=mymodule
    displayName: "pytest"

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: "test-results.xml"
      testRunTitle: $(Agent.JobName)
    condition: succeededOrFailed()

  - script: |
      pip install coveralls
      python -m coveralls
    condition: eq(variables['publishCoverage'], 'true')
    displayName: "Publish code coverage to Coveralls"

- job: "Publish"
  dependsOn: "Test"
  pool:
    vmImage: "Ubuntu-16.04"

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "3.x"
      architecture: "x64"

  - script: python setup.py sdist
    displayName: "Build sdist"
